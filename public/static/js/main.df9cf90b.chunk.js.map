{"version":3,"sources":["queries/queries.js","components/AddBook.js","components/BookDetails.js","components/BookList.js","App.js","serviceWorker.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","AddBook","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateAuthors","data","loading","react_default","a","createElement","disabled","authors","map","author","key","id","value","name","handleChange","e","setState","defineProperty","target","handleSubmit","preventDefault","variables","state","price","parseFloat","edition","authorId","refetchQueries","query","className","onSubmit","bind","type","placeholder","onChange","Component","compose","graphql","BookDetails","generateBookDetails","book","books","options","bookId","BookList","selected","_this2","style","listStyle","onClick","components_BookDetails","client","ApolloClient","uri","App","react_apollo_esm","components_BookList","components_AddBook","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df9cf90b.chunk.js","sourcesContent":["import {\n    gql\n} from 'apollo-boost'\n\nconst getBooksQuery = gql`\n    {\n        books {\n            name\n            id\n        }\n    }\n`\n\nconst getAuthorsQuery = gql`\n    {\n        authors {\n            name\n            id\n        }\n    }\n`\n\nconst addBookMutation = gql`\n    mutation($name: String!, $edition: String!, $price: Float!, $authorId: ID!){\n        addBook( name: $name,  edition: $edition,  price: $price,  authorId: $authorId){\n            name\n            id\n        }\n    }\n`\n\nconst getBookQuery = gql`\n    query GetBook($id: ID) {\n        book(id: $id) {\n            name\n            price\n            edition\n            id\n            author {\n                name\n                age\n                id\n                books {\n                    name\n                    id\n                }\n            }\n        }\n    }\n`\n\nexport {\n    getBooksQuery,\n    getAuthorsQuery,\n    getBookQuery,\n    addBookMutation\n}","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo'\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from '../queries/queries'\n\nclass AddBook extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: '',\n            price: 0,\n            edition: '',\n            authorId: ''\n        }\n    }\n\n    generateAuthors = () => {\n        let data = this.props.getAuthorsQuery\n        if (data.loading) {\n            return (\n                <option disabled>Loading Authors</option>\n            )\n        }\n        else {\n            return data.authors.map(author => {\n                return (\n                    <option key={author.id} value={author.id}>{author.name}</option>\n                )\n            })\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.addBookMutation({\n            variables: {\n                name: this.state.name,\n                price: parseFloat(this.state.price),\n                edition: this.state.edition,\n                authorId: this.state.authorId\n            },\n            refetchQueries: [{ query: getBooksQuery }]\n        })\n        this.setState({ name: '', edition: '', price: 0, authorId: '' })\n    }\n    render() {\n        return (\n            <div className=\"add-book\">\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                    <div>\n                        <label>Book Name</label>\n                        <input type=\"text\" value={this.state.name} name=\"name\" placeholder=\"Enter book name\" onChange={this.handleChange.bind(this)} />\n                    </div>\n                    <div>\n                        <label>Price</label>\n                        <input type=\"number\" value={this.state.price} name=\"price\" placeholder=\"Price\" onChange={this.handleChange.bind(this)} />\n                    </div>\n                    <div>\n                        <label>Book Edition</label>\n                        <input type=\"text\" value={this.state.edition} name=\"edition\" placeholder=\"Enter book Edition\" onChange={this.handleChange.bind(this)} />\n                    </div>\n                    <div>\n                        <label>Authors</label>\n                        <select name=\"authorId\" onChange={this.handleChange.bind(this)} value={this.state.authorId}>\n                            <option>Select Author</option>\n                            {this.generateAuthors()}\n                        </select>\n                    </div>\n                    <div>\n                        <button>Submit</button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default compose(\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n    graphql(addBookMutation, { name: \"addBookMutation\" })\n)(AddBook)","import React, { Component } from 'react'\nimport { getBookQuery } from '../queries/queries'\nimport { graphql } from 'react-apollo'\n\nclass BookDetails extends Component {\n    generateBookDetails = () => {\n        let data = this.props.data\n        if (data.book) {\n            return (\n                <div>\n                    <h1>Book Name: {data.book.name}</h1>\n                    <h3>Price: {data.book.price}</h3>\n                    <h4>Edition: {data.book.edition}</h4>\n                    <h2>Author:{data.book.author.name}</h2>\n                    <h4>All Books by this author:</h4>\n                    {\n                        data.book.author.books.map(book => (\n                            <h4 key={book.id}>{book.name}</h4>\n                        ))\n                    }\n                </div>\n            )\n        }\n        else {\n            return (<div>No book selected</div>)\n        }\n    }\n    render() {\n        return (\n            <div className=\"book-details\">\n                <h1>Books Details Here:</h1>\n                {this.generateBookDetails()}\n            </div>\n        )\n    }\n}\n\nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId\n            }\n        }\n    }\n})(BookDetails)\n\n\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo'\nimport { getBooksQuery } from '../queries/queries'\nimport BookDetails from './BookDetails'\n\nclass BookList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected: null\n        }\n    }\n    render() {\n        return (\n            <div >\n                <div className=\"book-list\">\n\n                    <h1>All Books</h1>\n                    {\n                        this.props.data.loading && (\n                            <div>\n                                <h1>Please wait...</h1>\n                            </div>\n                        )\n                    }\n                    <ul style={{ listStyle: 'none' }}>\n                        {\n                            !this.props.data.loading && this.props.data.books.map(book => (\n                                <li key={book.id} onClick={() => this.setState({ selected: book.id })}>{book.name}</li>\n                            ))\n                        }\n                    </ul>\n                </div>\n\n                <BookDetails bookId={this.state.selected} />\n            </div>\n        );\n    }\n}\n\nexport default graphql(getBooksQuery)(BookList)\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport AddBook from './components/AddBook';\nimport BookList from './components/BookList';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className='app'>\n        <div id='book-list'>\n          <BookList />\n        </div>\n        <AddBook />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}